import tweepy

from cve_monitor.logging import logger
from cve_monitor.nist import get_cve_info
from cve_monitor.app_monitor import read_all_app
from cve_monitor.utils import send_telegram, update_twitter_pid, get_all_twitter_pid
from cve_monitor.config import TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET, TWITTER_ACCESS_TOKEN
from cve_monitor.config import TWITTER_USERNAME, TWITTER_COUNT, TWITTER_ACCESS_SECRET, CVE_SEND_LOG_FILE


# Main function
def tweet_feed():
    try:
        # Ket noi toi API cua Twitter
        authentication = tweepy.OAuthHandler(TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET)
        authentication.set_access_token(TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_SECRET)
        api = tweepy.API(auth=authentication, wait_on_rate_limit=True)
        tweet_data = api.user_timeline(screen_name=TWITTER_USERNAME, count=TWITTER_COUNT)
        # Lay ra cac app dang monitor
        apps = read_all_app()
        for tweet in tweet_data:
            for item in apps:
                app_name = item.get("app_name")
                if str(app_name.lower()) in tweet.text.lower():
                    existing_twid = get_all_twitter_pid(CVE_SEND_LOG_FILE)
                    if str(tweet.id) not in existing_twid:
                        # Get CVE-ID
                        cve_id = tweet.text.split(" ")[0]
                        # Crawl thong tin CVE tu NIST
                        description, cvss_score, level, attack_vector = get_cve_info(cve_id)
                        # Gui CVE ve Telegram
                        msg = f"[CVE] APP Name: {app_name}\nCVE: {cve_id}\nDescription: {description}\nCVSS: {cvss_score}\nLevel: {level}\nAttackvector: {attack_vector}"
                        send_telegram(msg)
                        # Update tweet da gui vao file
                        update_twitter_pid(CVE_SEND_LOG_FILE, str(tweet.id))
    except Exception as ex:
        logger.warning(str(ex))
